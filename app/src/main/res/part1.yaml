openapi: 3.0.1
info:
  title: Swagger Bookstore - OpenAPI 3.0
  version: 1.0.11
servers:
  - url: https://bookstore3.swagger.io/api/v3
tags:
  - name: Authors
    description: information about the author
  - name: Books
    description: Book information
  - name: Orders
    description: Customer orders
  - name: store
    description: Access to Bookstore orders
paths:
  /authors:
    get:
      tags:
        - Authors
      summary: List all authors
      description: Retrieve a list of all authors available in the bookstore.
      operationId: listAuthors
      responses:
        '200':
          description: A list of authors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      tags:
        - Authors
      summary: Add a new author
      description: Add a new author to the store
      operationId: addAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /authors/{LongId}:
    get:
      tags:
        - Authors
      summary: Find author by ID
      description: Returns a single author
      operationId: getAuthorById
      parameters:
        - name: LongId
          in: path
          description: ID of author to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    put:
      tags:
        - Authors
      summary: Update author
      description: This can only be done by the logged in user.
      operationId: updateAuthor
      parameters:
        - name: LongId
          in: path
          description: ID that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent author in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author updated successfully
    delete:
      tags:
        - Authors
      summary: Deletes an author
      description: Delete an author
      operationId: deleteAuthor
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: LongId
          in: path
          description: Author id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Author deleted successfully
  /authors/{id}/books:
    get:
      tags:
        - Authors
      summary: Finds Books by Author
      description: Retrieve a list of books written by a specific author.
      operationId: findBooksByAuthor
      parameters:
        - name: id
          in: path
          description: ID of the author to retrieve books for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books:
    get:
      tags:
        - Books
      summary: List all books
      description: Retrieve a list of all books available in the bookstore.
      operationId: listBooks
      responses:
        '200':
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags:
        - Books
      summary: Add a new book
      description: Add a new book to the store
      operationId: addBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books/{LongId}:
    get:
      tags:
        - Books
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
        - name: LongId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Update book
      description: This can only be done by the logged in user.
      operationId: updateBook
      parameters:
        - name: LongId
          in: path
          description: ID that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent book in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
    delete:
      tags:
        - Books
      summary: Deletes a book
      description: Delete a book
      operationId: deleteBook
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: LongId
          in: path
          description: Book id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book deleted successfully
  /books/{ISBN}/authors:
    get:
      tags:
        - Books
      summary: List all authors of a book
      description: Retrieve a list of all authors of the book identified by ISBN.
      operationId: listAuthorsOfBook
      parameters:
        - name: ISBN
          in: path
          description: The ISBN of the book
          required: true
          schema:
            type: string
            format: isbn
      responses:
        '200':
          description: A list of authors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /books/{ISBN}/orders:
    get:
      tags:
        - Books
      summary: List orders containing a specific book
      description: Retrieve a list of orders that contain the book identified by ISBN.
      operationId: listOrdersByBook
      parameters:
        - name: ISBN
          in: path
          description: The ISBN of the book
          required: true
          schema:
            type: string
            format: isbn
      responses:
        '200':
          description: A list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /orders:
    get:
      tags:
        - Orders
      summary: List all orders
      description: Retrieve a list of all orders available in the store.
      operationId: listOrders
      responses:
        '200':
          description: A list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
        - Orders
      summary: Create an order
      description: Add a new order to the store
      operationId: addOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /orders/{LongId}:
    get:
      tags:
        - Orders
      summary: Find order by ID
      description: Returns an order
      operationId: getOrderById
      parameters:
        - name: LongId
          in: path
          description: ID of order
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    put:
      tags:
        - Orders
      summary: Update order
      description: Update order by ID
      operationId: updateOrder
      parameters:
        - name: LongId
          in: path
          description: ID that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated successfully
  /orders/{LongId}/books:
    get:
      tags:
        - Orders
      summary: List all books in an order
      description: Retrieve a list of all books included in the order identified by ID.
      operationId: listBooksInOrder
      parameters:
        - name: LongId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags:
        - Orders
      summary: Add a book to an existing order
      description: Add a book to an existing order identified by ID.
      operationId: addBookToOrder
      parameters:
        - name: LongId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: integer
                  description: The ID of the book to add to the order
      responses:
        '201':
          description: Book added to the order successfully
  /orders/{LongId}/books/{ISBN}:
    delete:
      tags:
        - Orders
      summary: Remove a book from an existing order
      description: >-
        Remove a book identified by ISBN from an existing order identified by
        ID.
      operationId: removeBookFromOrder
      parameters:
        - name: LongId
          in: path
          description: The ID of the order
          required: true
          schema:
            type: integer
        - name: ISBN
          in: path
          description: The ISBN of the book to remove from the order
          required: true
          schema:
            type: string
            format: isbn
      responses:
        '204':
          description: Book removed from the order successfully
        '404':
          description: Order not found or book not found in the order
  /store/inventory:
    get:
      tags:
        - Store
      summary: Returns book inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
components:
  schemas:
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Author:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: J.K Rowling
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: authors status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: authors
    Book:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Harry Potter
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: books status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: books
    Order:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the order.
        customer:
          type: string
          description: The name of the customer who placed the order.
        items:
          type: array
          items:
            type: object
            properties:
              book:
                $ref: '#/components/schemas/Book'
              quantity:
                type: integer
          description: >-
            The items included in the order, along with the quantity of each
            item.
        total:
          type: number
          description: The total price of the order.
      required:
        - id
        - customer
        - items
        - total
